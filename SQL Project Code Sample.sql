/* Write a query select top 10 percent customer informartion.  
Retrieve CustomerKey, Title, Gender columns only */ 

SELECT
    TOP 10 PERCENT 
    CustomerKey, 
    Title, 
    Gender
FROM dbo.DimCustomer

/* Write a query to get SalesOrderNumber, ProductKey, OrderDate from FactInternetSales then caculate: 
- Total Revenue equal to OrderQuantity*UnitPrice 
- Total Cost equal to ProductStandardCost + DiscountAmount 
- Profit equal to Total Revenue - Total Cost 
- Profit margin equal (Total Revenue - Total Cost)/Total Revenue */ 

SELECT 
    SalesOrderNumber,
    ProductKey,
    OrderDate,
    UnitPrice * OrderQuantity AS TotalRevenue,
    ProductStandardCost + DiscountAmount AS TotalCost,
    UnitPrice * OrderQuantity -  ( ProductStandardCost + DiscountAmount ) AS Profit,
    (UnitPrice * OrderQuantity -  ( ProductStandardCost + DiscountAmount ))/(UnitPrice * OrderQuantity) AS ProfitMargin
FROM dbo.FactInternetSales 

/* From table DimEmployee, select all records that satisfy one of the following conditions: 
    • DepartmentName is equal to 'Tool Design'
    • Status does NOT include the value NULL 
    • StartDate in the period from '2009-01-01' to '2009-12-31' 
And must have VacationHours > 10 */ 

SELECT 
    *
FROM dbo.DimEmployee
WHERE 
    (
    DepartmentName = 'Tool Design'
    OR [Status] IS NOT NULL
    OR StartDate BETWEEN '2009-01-01' AND '2009-12-31'
    )
    AND VacationHours > 10

/* From DimProduct display ProductKey, ProductAlternateKey and EnglishProductName of products  
which have ProductAlternateKey begins with 'BK-' followed by any character other than 'T' 
and ends with a '-' followed by any two numerals.  
And satisfy Color are black, red, or white  */

SELECT 
    ProductKey,
    ProductAlternateKey,
    EnglishProductName
FROM dbo.DimProduct
WHERE ProductAlternateKey LIKE 'BK-[^T]%-[0-9][0-9]'
AND Color IN ('Black','Red','White') 

/* From dbo.FactInternetSales and dbo.DimSalesTerritory, 
Write a query displaying the sales orders where the sales amount exceeds $1,000.  
Retrieve only those rows have the territory region is Canada. */ 

SELECT 
    FIS.SalesOrderNumber,
    FIS.SalesAmount,
    DST.SalesTerritoryRegion
FROM dbo.FactInternetSales AS FIS 
LEFT JOIN dbo.DimSalesTerritory AS DST 
ON FIS.SalesTerritoryKey = DST.SalesTerritoryKey
WHERE FIS.SalesAmount > 1000 AND DST.SalesTerritoryRegion = 'Canada'

/* From dbo.DimProduct, Get ProductKey, EnglishProductName and 2 new columns:      
ProductFlag is generated by the string preceded by the '-' character in EnglishProductName.    
(If EnglishProductName do not have '-' then keep EnglishProductName value.)
GroupSize follows by conditions:      
- Size is 'S' or less than 43 --> 'small'     
- Size is 'M' or 'L' or from 43 to 57 --> 'medium'     
- Size is 'XL' or larger than 57 --> 'big'     
- NULL --> 'no size' */ 

SELECT 
    ProductKey,
    EnglishProductName,
    CASE 
        WHEN CHARINDEX('-',EnglishProductName) <> 0 THEN LEFT(EnglishProductName,CHARINDEX('-',EnglishProductName)-1)
        ELSE EnglishProductName
    END AS ProductFlag
    ,
    CASE 
        WHEN Size = 'S' THEN 'Small'
        WHEN [Size] IN ('M','L') THEN 'Medium'
        WHEN [Size] = 'XL' THEN 'Big'
        WHEN Size < 43 THEN 'Small'
        WHEN [Size] >= 43 and [Size] < 57 THEN 'Medium'
        WHEN [Size] >= 57 THEN 'Big'
        ELSE 'No Size'
    END AS GroupSize
FROM dbo.DimProduct

--2. From dbo.DimProduct and DimProductSubcategory, DimProductCategrory 
-- Write a query displaying the Product key, EnglishProductName, EnglishProductSubCategoryName ,
--  EnglishProductCategroyName columns of product which has EnglishProductCategoryName is 'Clothing' 

SELECT 
    DP.ProductKey,
    DP.EnglishProductName,
    DPS.EnglishProductSubcategoryName,
    DPC.EnglishProductCategoryName
FROM dbo.DimProduct AS DP 
LEFT JOIN dbo.DimProductSubcategory AS DPS ON DP.ProductSubcategoryKey = DPS.ProductSubcategoryKey
LEFT JOIN dbo.DimProductCategory AS DPC ON DPS.ProductCategoryKey = DPC.ProductCategoryKey
WHERE DPC.EnglishProductCategoryName = 'Clothing'


/* From FactInternetSales, DimCustomer 
Caculate TotalSalesAmount by each CustomerKey in each Year. 
Retain customers who have total value of orders greater than 5000 per year */

SELECT 
    DC.CustomerKey,
    YEAR(FIS.OrderDate) AS OrderYear,
    SUM(FIS.SalesAmount) AS TotalAmount
FROM dbo.FactInternetSales AS FIS 
LEFT JOIN dbo.DimCustomer AS DC 
ON FIS.CustomerKey = DC.CustomerKey
GROUP BY DC.CustomerKey, YEAR(FIS.OrderDate)
HAVING SUM(FIS.SalesAmount) > 5000

/* From the FactInternetsales and FactResellersales tables, retrieve saleordernumber, productkey,  
orderdate, shipdate of orders in October 2011,
along with new column named SalesType  
(if orders come from FactInternetSales then 'Internet', if orders come from FactResellerSales then 'Reseller') */

SELECT 
    SalesOrderNumber,
    ProductKey,
    OrderDate,
    ShipDate,
    'Internet' AS SaleType
FROM dbo.FactInternetSales 
WHERE YEAR(OrderDate) = '2011' AND MONTH(OrderDate) = 10
UNION
SELECT 
    SalesOrderNumber,
    ProductKey,
    OrderDate,
    ShipDate,
    'Reseller' AS SaleType
FROM dbo.FactResellerSales
WHERE YEAR(OrderDate) = '2011' AND MONTH(OrderDate) = 10;

/* Caculate Total OrderQuantity ( from OrderQuantity column) of each ProductKey 
from 2 SalesType (Internet, Resell) where:  
OrderDate in Quarter 3,2013  
And Customer/Resellers live in London 
The result should contain the following columns: ProductKey, EnglishProductName, SalesType, TotalOrderQuantity */

WITH Temp_Internet AS (
SELECT 
    DP.ProductKey,
    DP.EnglishProductName,
    SUM(FIS.OrderQuantity) AS TotalQuantity,
    'Internet' AS SaleType
FROM dbo.FactInternetSales AS FIS 
LEFT JOIN dbo.DimProduct AS DP ON FIS.ProductKey = DP.ProductKey
LEFT JOIN dbo.DimCustomer AS DC ON FIS.CustomerKey = DC.CustomerKey
LEFT JOIN dbo.DimGeography AS DG ON DC.GeographyKey = DG.GeographyKey
WHERE YEAR(FIS.OrderDate) = 2013 AND DATEPART(QUARTER,FIS.OrderDate) = 3 AND DG.City = 'London'
GROUP BY DP.ProductKey, DP.EnglishProductName
),
Temp_Reseller AS (
SELECT 
    DP.ProductKey,
    DP.EnglishProductName,
    SUM(FRS.OrderQuantity) AS TotalQuantity,
    'Reseller' AS SaleType
FROM dbo.FactResellerSales AS FRS 
LEFT JOIN dbo.DimProduct AS DP ON FRS.ProductKey = DP.ProductKey
LEFT JOIN dbo.DimReseller AS DR ON FRS.ResellerKey = DR.ResellerKey
LEFT JOIN dbo.DimGeography AS DG ON DR.GeographyKey = DG.GeographyKey
WHERE YEAR(FRS.OrderDate) = 2013 AND DATEPART(QUARTER,FRS.OrderDate) = 3 AND DG.City = 'London'
GROUP BY DP.ProductKey, DP.EnglishProductName
)

SELECT 
    ProductKey,
    EnglishProductName,
    SaleType,
    TotalQuantity
FROM Temp_Internet
UNION 
SELECT 
    ProductKey,
    EnglishProductName,
    SaleType,
    TotalQuantity
FROM Temp_Reseller;

/* Retrieve total SalesAmount monthly of internet_sales and reseller_sales.  
The result should contain the following columns: Year, Month, Internet_Sales, Reseller_Sales */

WITH temp_internet_sale AS (
    SELECT 
        YEAR(OrderDate) AS YearInternetDate,
        MONTH(OrderDate) AS MonthInternetDate,
        SUM(SalesAmount) AS TotalAmountInternt
    FROM dbo.FactInternetSales
    GROUP BY YEAR(OrderDate), MONTH(OrderDate)
),
temp_reseller_sale AS (
    SELECT 
        YEAR(OrderDate) AS YearResellerDate,
        MONTH(OrderDate) AS MonthResellerDate,
        SUM(SalesAmount) AS TotalAmountReseller
    FROM dbo.FactResellerSales
    GROUP BY YEAR(OrderDate), MONTH(OrderDate)
)

SELECT 
    ISNULL(TRS.MonthResellerDate, TIS.MonthInternetDate) AS Month,
    ISNULL(TRS.YearResellerDate,  TIS.YearInternetDate) AS Year,
    TRS.TotalAmountReseller,
    TIS.TotalAmountInternt
FROM temp_reseller_sale as TRS 
FULL OUTER JOIN temp_internet_sale as TIS 
ON TRS.MonthResellerDate = TIS.MonthInternetDate AND TRS.YearResellerDate = TIS.YearInternetDate
